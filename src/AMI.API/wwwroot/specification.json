{
  "x-generator": "NSwag v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "AMI API",
    "description": "REST service for [Animated Medical Imaging](https://github.com/niklr/animated-medical-imaging) (AMI)\r\n\r\n## Introduction\r\nIntegrating this Application Programming Interface (API) is the easiest way to submit data to AMI. \r\nThe following documentation will help you to get full advantage of the API by understanding and implementing all endpoints. \r\nWith AMI API you will be able to upload files and submit tasks containing information needed for processing and receive the processed results. \r\nRequests with a body are sent in JavaScript Object Notation (JSON) format over HTTP(S), using the PUT or POST method.\r\n\r\nPlease, feel free to ask any questions, report bugs, suggest new features, and more on [GitHub](https://github.com/niklr/animated-medical-imaging/issues)\r\n\r\n## Authentication\r\nAuthentication of requests is accomplished by using JSON Web Tokens (JWT). Tokens can be obtained by providing your credentials to the tokens API endpoint.\r\nIf you don't have a registered account, you still can obtain tokens with the special API endpoint for anonymous users. \r\nThe response of the tokens API endpoint contains 3 different tokens: \r\n\r\n- **Access Token**: An authorization credential that can be used by the application to access the API.\r\n- **ID Token**: Contains user profile information (such as the user's name and email) which is represented in the form of claims.\r\n- **Refresh Token**: Contains the information required to obtain a new Access Token or ID Token.\r\n\r\nFor each API request you need to include the encoded JWT Access Token with a \"Bearer\" prefix.\r\n\r\n## Requests, Responses, and Errors\r\nStatus codes are issued by the API in response to a client's request made to the API.\r\n\r\n> A **successful** completion of a request returns one of three possible status codes.\r\n\r\nStatus code | Name | Description\r\n---- | ---- | ----\r\n200 | OK | The default status code for successful requests.\r\n201 | Created | Returned on successful POST requests when one or more new entities have been created.\r\n204 | No Content | Returned on successful DELETE requests.\r\n\r\n> An **unsuccessful** completion of a request returns one of the following status codes.\r\n\r\nStatus code | Name | Description\r\n---- | ---- | ----\r\n400 | Bad Request | The format of the URL and/or of values in the parameter list is not valid.\r\n401 | Unauthorized | Usually caused by using a wrong/expired access token or by not using one at all.\r\n403 | Forbidden | The request was valid, but insufficient permissions for the resource.\r\n404 | Not Found | The requested entity does not (or no longer) exist.\r\n409 | Conflict | Indicates a mismatch in the current state of the resource.\r\n429 | Too Many Requests | Indicates that the rate limit has been reached.\r\n500 | Internal Server Error | An exception occurred that has no adequate handling.\r\n\r\n## HTTP method definitions\r\nThe Hypertext Transfer Protocol (HTTP) defines a set of request methods to indicate the desired action to be performed for a given resource/endpoint. \r\nAlthough they can also be nouns, these request methods are sometimes referred as HTTP verbs.\r\nAn idempotent HTTP method can be called many times without different outcomes.\r\nAMI API makes use of the following HTTP methods:\r\n\r\nMethod | Description\r\n---- | ----\r\nGET | Getting a resource. (e.g. GET *https://localhost/objects/23* without body)\r\nPOST | Creating a resource. (e.g. POST *https://localhost/tasks* with a body containing JSON data)\r\nPUT | Updating a resource. (e.g. PUT *https://localhost/tasks/7* with a body containing JSON data)\r\nDELETE | Deleting a resource. (e.g. DELETE *https://localhost/objects/23* without body)\r\n\r\n## Rate Limits\r\nRequests are limited on a 60 seconds basis to provide equal access to the API for everyone.\r\nThe rate limit information is indicated in the header of the response e.g.\r\n\r\n- X-Rate-Limit-Limit: 1m\r\n- X-Rate-Limit-Remaining: 56\r\n- X-Rate-Limit-Reset: 2019-07-25T09:44:13.4658862Z\r\n\r\n## Pagination\r\nAll endpoints returning a list of entities are paginated by default.\r\nReturning a limited amount of entities is easier to handle, instead of hundreds or thousands.\r\n\r\nOption | Description\r\n---- | ---- \r\nlimit | Defines the limit to constrain the number of items. (Allowed values: 10, 25, 50)\r\npage | Defines the current page number. (Allowed values: 0, 1, 2, ...)\r\n\r\n## Date format\r\nAll dates are in UTC (Universal Time Coordinated) and represented in ISO 8601 format (International Organization for Standardization).\r\n\r\n> 2019-04-17T07:52:41.4700000Z\r\n\r\n## Webhooks\r\nAfter we process and complete your request you will be notified via webhook depending on the type of request.\r\nDedicated resources enable you to specify new webhooks, get missed webhooks and clear missed webhooks.\r\nFor testing purposes you can use a service like [hookbin.com](https://hookbin.com/).\r\n\r\n",
    "version": "0.0.6"
  },
  "paths": {
    "/api-options": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get API options",
        "description": "With this GET request you can obtain the options used to configure the API.\nIt contains options related to authentication and authorization, rate limiting and others.",
        "operationId": "ApiOptions_Get",
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the API options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiOptions"
                }
              }
            }
          }
        }
      }
    },
    "/app-info": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get application information",
        "description": "With this GET request you can obtain information about the application (e.g. application name and current version).",
        "operationId": "AppInfo_Get",
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the application information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfo"
                }
              }
            }
          }
        }
      }
    },
    "/app-logs": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get paginated list of application logs",
        "description": "With this GET request you can obtain a paginated list of application logs.\nThe application logs are sorted in descending order by creation date.",
        "operationId": "AppLogs_GetPaginated",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit to constrain the number of items.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing a list of paginated application logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResultModelOfObjectModel"
                }
              }
            }
          }
        }
      }
    },
    "/app-options": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get application options",
        "description": "With this GET request you can obtain the options used to configure the application.\nIt contains options such as the timeout in milliseconds before a request is canceled,\nthe maximum amount of entries an archive is allowed to have, and others.",
        "operationId": "AppOptions_Get",
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the application options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppOptions"
                }
              }
            }
          }
        }
      }
    },
    "/objects": {
      "get": {
        "tags": [
          "Objects"
        ],
        "summary": "Get paginated list of objects",
        "description": "With this GET request you can obtain a paginated list of objects.\nThe objects are sorted in descending order by creation date.",
        "operationId": "Objects_GetPaginated",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The limit to constrain the number of items.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing a list of paginated objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResultModelOfObjectModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/objects/{id}": {
      "get": {
        "tags": [
          "Objects"
        ],
        "summary": "Get object by id",
        "description": "With this GET request you can obtain information about the object with the specified identifier.\nAn object is an abstraction for an uploaded file and can be processed by creating one or multiple tasks.",
        "operationId": "Objects_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier of the object.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the specified object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Objects"
        ],
        "summary": "Delete object by id",
        "description": "With this DELETE request you can delete the object with the specified identifier.",
        "operationId": "Objects_DeleteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier of the object.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "204": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/objects/upload": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "Upload an object",
        "description": "With this POST request you can upload a file in chunks in order to create an object.\nIf the file format consists of multiple files (e.g. Analyze or single-frame DICOM)\nthey have to be uploaded as single-file archive (.tar, tar.gz, .zip, .7z).",
        "operationId": "Objects_Upload",
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "description": "The file.",
            "schema": {
              "type": "string",
              "format": "binary",
              "nullable": true
            },
            "nullable": true
          },
          {
            "name": "chunkNumber",
            "in": "query",
            "description": "The chunk number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "totalSize",
            "in": "query",
            "description": "The total size of the upload.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "uid",
            "in": "query",
            "description": "The unique identifier.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "relativePath",
            "in": "query",
            "description": "The relative path.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "totalChunks",
            "in": "query",
            "description": "The total chunks.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the result of the resumable upload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get test value",
        "description": "With this GET request you can obtain a test value to verify the connection and authentication.\nIf the ping is successful you will receive a pong in the form of a JSON response.",
        "operationId": "Ping_Get",
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the test value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PongModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/results/{id}": {
      "get": {
        "tags": [
          "Results"
        ],
        "summary": "Get result by id",
        "description": "With this GET request you can obtain information about the result with the specified identifier.\nA result is an abstraction for the outcome of a finished task.",
        "operationId": "Results_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier of the result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the specified result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/results/{id}/images/{filename}": {
      "get": {
        "tags": [
          "Results"
        ],
        "summary": "Get image of result",
        "description": "With this GET request you can obtain a specific image of the result with the specified identifier.",
        "operationId": "Results_GetImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier of the object.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "description": "The name of the file.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A stream containing the image."
          }
        }
      }
    },
    "/results/{id}/download": {
      "get": {
        "tags": [
          "Results"
        ],
        "summary": "Download result",
        "description": "With this GET request you can download the result with the specified identifier as an archive.",
        "operationId": "Results_DownloadById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A stream containing the result as an archive."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get task by id",
        "description": "With this GET request you can obtain information about the task with the specified identifier.\nA task is an abstraction for job being processed in the background.",
        "operationId": "Tasks_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier of the task.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the specified task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create task",
        "description": "With this POST request you can create a task being processed in the background.",
        "operationId": "Tasks_Create",
        "requestBody": {
          "x-name": "command",
          "description": "The command to create a new task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "201": {
            "description": "A model containing the created task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Create tokens",
        "description": "With this POST request you can obtain tokens with your credentials.\nTokens are used for authentication and authorization purposes.",
        "operationId": "Tokens_Create",
        "requestBody": {
          "x-name": "credentials",
          "description": "The credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsModel"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenContainerModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Update tokens",
        "description": "With this PUT request you can update an expired access token with a new valid access token based on the provided refresh token.",
        "operationId": "Tokens_Update",
        "requestBody": {
          "x-name": "container",
          "description": "The container with the tokens.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenContainerModel"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the updated tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenContainerModel"
                }
              }
            }
          }
        }
      }
    },
    "/tokens/anon": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Create anonymous tokens",
        "description": "With this POST request you can obtain tokens as anonymous user.\nTokens are used for authentication and authorization purposes.",
        "operationId": "Tokens_CreateAnonymous",
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "429": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "200": {
            "description": "A model containing the tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenContainerModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorModel": {
        "type": "object",
        "description": "A model representing an error.",
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string",
            "description": "Gets or sets the error.",
            "nullable": true
          },
          "validationErrors": {
            "type": "object",
            "description": "Gets or sets the validation errors.",
            "nullable": true,
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "stackTrace": {
            "type": "string",
            "description": "Gets or sets the stack trace.",
            "nullable": true
          }
        }
      },
      "ApiOptions": {
        "type": "object",
        "description": "The API options.",
        "additionalProperties": false,
        "properties": {
          "batchSize": {
            "type": "integer",
            "description": "Gets the amount of entities included in a batch operation. Default is 1000.",
            "format": "int32"
          },
          "cleanupPeriod": {
            "type": "integer",
            "description": "Gets the cleanup period in minutes. Default is 0 to prevent any cleanup.\nAutomatically deletes objects older than the defined period.",
            "format": "int32"
          },
          "connectingIpHeaderName": {
            "type": "string",
            "description": "Gets the name of header used to identify the IP address of the connecting client.",
            "nullable": true
          },
          "isDevelopment": {
            "type": "boolean",
            "description": "Gets a value indicating whether the current environment is development."
          },
          "authOptions": {
            "description": "Gets the options used for authentication and authorization.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAuthOptions"
              }
            ]
          },
          "ipRateLimiting": {
            "description": "Gets the options used to limit the rate based on the IP address of the client.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IIpRateLimitOptions"
              }
            ]
          },
          "ipRateLimitPolicies": {
            "description": "Gets the policies used to limit the rate base on the IP address of the client.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IIpRateLimitPolicies"
              }
            ]
          }
        }
      },
      "IAuthOptions": {
        "type": "object",
        "description": "An interface representing options related to authentication and authorization.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "allowAnonymous": {
            "type": "boolean",
            "description": "Gets a value indicating whether anonymous authentication is allowed."
          },
          "anonymousUsername": {
            "type": "string",
            "description": "Gets the username for anonymous users (default is Anon).",
            "nullable": true
          },
          "maxRefreshTokens": {
            "type": "integer",
            "description": "Gets the maximum amount of valid refresh tokens a single user is allowed to store (default is 10).",
            "format": "int32"
          },
          "expireAfter": {
            "type": "integer",
            "description": "Gets the amount of minutes an access token remains valid (default is 60).",
            "format": "int32"
          },
          "jwtOptions": {
            "description": "Gets the JSON Web Token (JWT) options.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IAuthJwtOptions"
              }
            ]
          },
          "entities": {
            "type": "array",
            "description": "Gets the entities allowed to authenticate.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IAuthEntity"
            }
          }
        }
      },
      "IAuthJwtOptions": {
        "type": "object",
        "description": "An interface representing JSON Web Token (JWT) options.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "secretKey": {
            "type": "string",
            "description": "Gets the secret key used to sign created tokens and to validate received tokens.",
            "nullable": true
          },
          "issuer": {
            "type": "string",
            "description": "Gets the principal that issued the JWT.",
            "nullable": true
          },
          "audience": {
            "type": "string",
            "description": "Gets the recipient that the JWT is intended for.",
            "nullable": true
          },
          "nameClaimType": {
            "type": "string",
            "description": "Gets the claim representing the name.",
            "nullable": true
          },
          "roleClaimType": {
            "type": "string",
            "description": "Gets the claim representing the role.",
            "nullable": true
          },
          "issuerClaimType": {
            "type": "string",
            "description": "Gets the claim representing the issuer.",
            "nullable": true
          },
          "usernameClaimType": {
            "type": "string",
            "description": "Gets the claim representing the username.",
            "nullable": true
          }
        }
      },
      "IAuthEntity": {
        "type": "object",
        "description": "An interface representing an entity related to authentication.",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets the username.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Gets the password.",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "description": "Gets the roles.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IIpRateLimitOptions": {
        "type": "object",
        "description": "An interface representing the options to limit the rate based on the IP address of the client.\nSource: https://github.com/stefanprodan/AspNetCoreRateLimit",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "realIpHeader": {
            "type": "string",
            "description": "Gets the HTTP header of the real ip header injected by reverse proxy, by default is X-Real-IP",
            "nullable": true
          },
          "clientIdHeader": {
            "type": "string",
            "description": "Gets the HTTP header that holds the client identifier, by default is X-ClientId",
            "nullable": true
          },
          "ipPolicyPrefix": {
            "type": "string",
            "description": "Gets the policy prefix, used to compose the client policy cache key",
            "nullable": true
          },
          "ipWhitelist": {
            "type": "array",
            "description": "Gets the IP address whitelist.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IIpRateLimitPolicies": {
        "type": "object",
        "description": "An interface representing the policies used to limit the rate base on the IP address of the client.\nSource: https://github.com/stefanprodan/AspNetCoreRateLimit",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "ipRules": {
            "type": "array",
            "description": "Gets the rules to limit the rate based on the IP address of the client.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IIpRateLimitPolicy"
            }
          }
        }
      },
      "IIpRateLimitPolicy": {
        "type": "object",
        "description": "An interface representing the policy to limit the rate based on the IP address of the client.\nSource: https://github.com/stefanprodan/AspNetCoreRateLimit",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "ip": {
            "type": "string",
            "description": "Gets the IP address.",
            "nullable": true
          }
        }
      },
      "AppInfo": {
        "type": "object",
        "description": "A model containing information about the application.",
        "additionalProperties": false,
        "properties": {
          "appName": {
            "type": "string",
            "description": "Gets the name of the application.",
            "nullable": true
          },
          "appVersion": {
            "type": "string",
            "description": "Gets the application version.",
            "nullable": true
          }
        }
      },
      "PaginationResultModelOfObjectModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ObjectModel"
            }
          },
          "pagination": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaginationModel"
              }
            ]
          }
        }
      },
      "ObjectModel": {
        "type": "object",
        "description": "A model representing an object.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier of the object.",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Gets or sets the created date.",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Gets or sets the modified date.",
            "format": "date-time"
          },
          "dataType": {
            "description": "Gets or sets the type of the data.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DataType"
              }
            ]
          },
          "fileFormat": {
            "description": "Gets or sets the file format.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileFormat"
              }
            ]
          },
          "originalFilename": {
            "type": "string",
            "description": "Gets or sets the original filename.",
            "nullable": true
          },
          "sourcePath": {
            "type": "string",
            "description": "Gets or sets the source path (directory, file, url, etc.).",
            "nullable": true
          },
          "extractedPath": {
            "type": "string",
            "description": "Gets or sets the extracted/uncompressed path (directory).",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Gets or sets the user identifier.",
            "nullable": true
          },
          "latestTask": {
            "description": "Gets or sets the latest task.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskModel"
              }
            ]
          }
        }
      },
      "DataType": {
        "type": "string",
        "description": "A type to describe the data.",
        "x-enumNames": [
          "Unknown",
          "RawImage",
          "SegmentationImage"
        ],
        "enum": [
          "Unknown",
          "RawImage",
          "SegmentationImage"
        ]
      },
      "FileFormat": {
        "type": "string",
        "description": "A type to describe the file format.",
        "x-enumNames": [
          "Unknown",
          "Dicom",
          "Analyze",
          "MetaImage",
          "Nifti",
          "Rar",
          "Zip",
          "Tar",
          "SevenZip",
          "GZip"
        ],
        "enum": [
          "Unknown",
          "Dicom",
          "Analyze",
          "MetaImage",
          "Nifti",
          "Rar",
          "Zip",
          "Tar",
          "SevenZip",
          "GZip"
        ]
      },
      "TaskModel": {
        "type": "object",
        "description": "A model containing information about the task.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier of the task.",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Gets or sets the created date.",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Gets or sets the modified date.",
            "format": "date-time"
          },
          "status": {
            "description": "Gets or sets the status.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              }
            ]
          },
          "message": {
            "type": "string",
            "description": "Gets or sets the message describing the error.",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "Gets or sets the position in queue.",
            "format": "int32"
          },
          "progress": {
            "type": "integer",
            "description": "Gets or sets the progress (0-100).",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "description": "Gets or sets the user identifier.",
            "nullable": true
          },
          "command": {
            "description": "Gets or sets the command used to create this task.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BaseCommand"
              }
            ]
          },
          "result": {
            "description": "Gets or sets the result associated with this task.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BaseResultModel"
              }
            ]
          },
          "object": {
            "description": "Gets or sets the object associated with this task.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ObjectModel"
              }
            ]
          }
        }
      },
      "TaskStatus": {
        "type": "string",
        "description": "The different states of a task.",
        "x-enumNames": [
          "Created",
          "Queued",
          "Processing",
          "Canceled",
          "Failed",
          "Finished"
        ],
        "enum": [
          "Created",
          "Queued",
          "Processing",
          "Canceled",
          "Failed",
          "Finished"
        ]
      },
      "BaseCommand": {
        "type": "object",
        "discriminator": {
          "propertyName": "discriminator",
          "mapping": {
            "BaseProcessCommand`1": "#/components/schemas/BaseProcessCommandOfProcessResultModel",
            "ProcessObjectCommand": "#/components/schemas/ProcessObjectCommand",
            "ProcessPathCommand": "#/components/schemas/ProcessPathCommand"
          }
        },
        "description": "The base all commands have in common.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "discriminator"
        ],
        "properties": {
          "discriminator": {
            "type": "string"
          }
        }
      },
      "ProcessObjectCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProcessCommandOfProcessResultModel"
          },
          {
            "type": "object",
            "description": "A command containing information needed to process objects.",
            "additionalProperties": false,
            "properties": {
              "commandType": {
                "description": "Gets the type of the command.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CommandType"
                  }
                ]
              },
              "id": {
                "type": "string",
                "description": "Gets or sets the identifier of the object.",
                "nullable": true
              }
            }
          }
        ]
      },
      "CommandType": {
        "type": "string",
        "description": "A type to describe the command.",
        "x-enumNames": [
          "Unknown",
          "ProcessPathCommand",
          "ProcessObjectCommand"
        ],
        "enum": [
          "Unknown",
          "ProcessPathCommand",
          "ProcessObjectCommand"
        ]
      },
      "BaseProcessCommandOfProcessResultModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCommand"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "outputSize": {
                "type": "integer",
                "format": "int32"
              },
              "amountPerAxis": {
                "type": "integer",
                "format": "int32"
              },
              "axisTypes": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AxisType"
                }
              },
              "imageFormat": {
                "$ref": "#/components/schemas/ImageFormat"
              },
              "bezierEasingTypePerAxis": {
                "$ref": "#/components/schemas/BezierEasingType"
              },
              "bezierEasingTypeCombined": {
                "$ref": "#/components/schemas/BezierEasingType"
              },
              "grayscale": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AxisType": {
        "type": "string",
        "description": "The different axis types of the coordinate system.",
        "x-enumNames": [
          "X",
          "Y",
          "Z"
        ],
        "enum": [
          "X",
          "Y",
          "Z"
        ]
      },
      "ImageFormat": {
        "type": "string",
        "description": "A type to describe the image format.",
        "x-enumNames": [
          "Unknown",
          "Jpeg",
          "Png"
        ],
        "enum": [
          "Unknown",
          "Jpeg",
          "Png"
        ]
      },
      "BezierEasingType": {
        "type": "string",
        "description": "A type to describe the Bézier curve easing.",
        "x-enumNames": [
          "None",
          "Linear",
          "EaseInCubic",
          "EaseOutCubic",
          "EaseInOutCubic",
          "EaseInQuart",
          "EaseOutQuart",
          "EaseInOutQuart"
        ],
        "enum": [
          "None",
          "Linear",
          "EaseInCubic",
          "EaseOutCubic",
          "EaseInOutCubic",
          "EaseInQuart",
          "EaseOutQuart",
          "EaseInOutQuart"
        ]
      },
      "ProcessPathCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProcessCommandOfProcessResultModel"
          },
          {
            "type": "object",
            "description": "A command containing information needed to process paths (directory, file, url, etc.).",
            "additionalProperties": false,
            "properties": {
              "commandType": {
                "description": "Gets the type of the command.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CommandType"
                  }
                ]
              },
              "sourcePath": {
                "type": "string",
                "description": "Gets or sets the source path.",
                "nullable": true
              },
              "watermarkSourcePath": {
                "type": "string",
                "description": "Gets or sets the source path of the watermark.",
                "nullable": true
              },
              "destinationPath": {
                "type": "string",
                "description": "Gets or sets the destination path.",
                "nullable": true
              }
            }
          }
        ]
      },
      "BaseResultModel": {
        "type": "object",
        "discriminator": {
          "propertyName": "discriminator",
          "mapping": {
            "ResultModel": "#/components/schemas/ResultModel",
            "ProcessResultModel": "#/components/schemas/ProcessResultModel"
          }
        },
        "description": "The base all results have in common.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "discriminator"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier of the result.",
            "nullable": true
          },
          "discriminator": {
            "type": "string"
          }
        }
      },
      "ProcessResultModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultModel"
          },
          {
            "type": "object",
            "description": "A model containing information about the result of the image processing.",
            "additionalProperties": false,
            "properties": {
              "resultType": {
                "$ref": "#/components/schemas/ResultType"
              },
              "labelCount": {
                "type": "integer",
                "description": "Gets or sets the label count.",
                "format": "int32"
              },
              "images": {
                "type": "array",
                "description": "Gets or sets the images.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/PositionAxisContainerModelOfString"
                }
              },
              "gifs": {
                "type": "array",
                "description": "Gets or sets the axis containers of the GIF images.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/AxisContainerModelOfString"
                }
              },
              "combinedGif": {
                "type": "string",
                "description": "Gets or sets the combined GIF.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ResultType": {
        "type": "string",
        "description": "A type to describe the command.",
        "x-enumNames": [
          "Unknown",
          "ProcessResult"
        ],
        "enum": [
          "Unknown",
          "ProcessResult"
        ]
      },
      "PositionAxisContainerModelOfString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AxisContainerModelOfString"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "position": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "AxisContainerModelOfString": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "axisType": {
            "$ref": "#/components/schemas/AxisType"
          },
          "entity": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResultModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResultModel"
          },
          {
            "type": "object",
            "description": "A model containing information about the result of the processing.",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "createdDate": {
                "type": "string",
                "description": "Gets or sets the created date.",
                "format": "date-time"
              },
              "modifiedDate": {
                "type": "string",
                "description": "Gets or sets the modified date.",
                "format": "date-time"
              },
              "version": {
                "type": "string",
                "description": "Gets or sets the application version.",
                "nullable": true
              },
              "jsonFilename": {
                "type": "string",
                "description": "Gets or sets the JSON filename.",
                "nullable": true
              }
            }
          }
        ]
      },
      "PaginationModel": {
        "type": "object",
        "description": "A model containing information about the pagination.",
        "additionalProperties": false,
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Gets or sets the limit to constrain the number of items.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Gets or sets the total amount of items.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Gets or sets the current page number.",
            "format": "int32"
          }
        }
      },
      "AppOptions": {
        "type": "object",
        "description": "The application options.",
        "additionalProperties": false,
        "properties": {
          "maxSizeKilobytes": {
            "type": "integer",
            "description": "Gets the maximum size in kilobytes.",
            "format": "int32"
          },
          "maxArchivedEntries": {
            "type": "integer",
            "description": "Gets the maximum of archived entries.",
            "format": "int32"
          },
          "timeoutMilliseconds": {
            "type": "integer",
            "description": "Gets the timeout in milliseconds.",
            "format": "int32"
          },
          "workingDirectory": {
            "type": "string",
            "description": "Gets the working directory.",
            "nullable": true
          }
        }
      },
      "PongModel": {
        "type": "object",
        "description": "A model containing test information",
        "additionalProperties": false,
        "properties": {
          "pong": {
            "type": "string",
            "description": "Gets or sets the pong value.",
            "nullable": true
          }
        }
      },
      "CreateTaskCommand": {
        "type": "object",
        "description": "A command containing information needed to create a task.",
        "additionalProperties": false,
        "properties": {
          "command": {
            "description": "Gets or sets the command used to create this task.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BaseCommand"
              }
            ]
          }
        }
      },
      "TokenContainerModel": {
        "type": "object",
        "description": "A model containing the access, identifier and refresh tokens.",
        "additionalProperties": false,
        "properties": {
          "accessToken": {
            "description": "Gets or sets the access token.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccessTokenModel"
              }
            ]
          },
          "accessTokenEncoded": {
            "type": "string",
            "description": "Gets or sets the endcoded access token.",
            "nullable": true
          },
          "idToken": {
            "description": "Gets or sets the identity token.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdTokenModel"
              }
            ]
          },
          "idTokenEncoded": {
            "type": "string",
            "description": "Gets or sets the endcoded identity token.",
            "nullable": true
          },
          "refreshToken": {
            "description": "Gets or sets the refresh token.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RefreshTokenModel"
              }
            ]
          },
          "refreshTokenEncoded": {
            "type": "string",
            "description": "Gets or sets the encoded refresh token.",
            "nullable": true
          }
        }
      },
      "AccessTokenModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTokenModel"
          },
          {
            "type": "object",
            "description": "The model containing information about the access token.",
            "additionalProperties": false,
            "properties": {
              "exp": {
                "type": "number",
                "description": "Gets or sets the \"expiration time\" claim identifying the expiration time on\nor after which the token MUST NOT be accepted for processing.",
                "format": "double"
              },
              "username": {
                "type": "string",
                "description": "Gets or sets the username.",
                "nullable": true
              },
              "roleClaims": {
                "type": "array",
                "description": "Gets or sets the roles.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "BaseTokenModel": {
        "type": "object",
        "discriminator": {
          "propertyName": "discriminator",
          "mapping": {
            "IdTokenModel": "#/components/schemas/IdTokenModel",
            "RefreshTokenModel": "#/components/schemas/RefreshTokenModel",
            "AccessTokenModel": "#/components/schemas/AccessTokenModel"
          }
        },
        "description": "The model all tokens have in common.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "discriminator"
        ],
        "properties": {
          "sub": {
            "type": "string",
            "description": "Gets or sets the subject claim identifying the principal that is the subject of the token.",
            "nullable": true
          },
          "iss": {
            "type": "string",
            "description": "Gets or sets the issuer claim identifying the principal that issued the token.",
            "nullable": true
          },
          "aud": {
            "type": "string",
            "description": "Gets or sets the audience claim identifying the recipients that the token is intended for.",
            "nullable": true
          },
          "nbf": {
            "type": "number",
            "description": "Gets or sets the \"not before\" claim identifying the time before which\nthe token MUST NOT be accepted for processing.",
            "format": "double"
          },
          "iat": {
            "type": "number",
            "description": "Gets or sets the \"issued at\" claim identifying the time at which the token was issued.",
            "format": "double"
          },
          "isAnon": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this token was issued to an anonymous user."
          },
          "discriminator": {
            "type": "string"
          }
        }
      },
      "IdTokenModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTokenModel"
          },
          {
            "type": "object",
            "description": "The model containing information about the identity token.",
            "additionalProperties": false,
            "properties": {
              "email": {
                "type": "string",
                "description": "Gets or sets the email address.",
                "nullable": true
              },
              "emailConfirmed": {
                "type": "boolean",
                "description": "Gets or sets a value indicating whether the email address is confirmed."
              },
              "username": {
                "type": "string",
                "description": "Gets or sets the username.",
                "nullable": true
              },
              "roleClaims": {
                "type": "array",
                "description": "Gets or sets the roles.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "RefreshTokenModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTokenModel"
          },
          {
            "type": "object",
            "description": "The model containing information about the refresh token.",
            "additionalProperties": false
          }
        ]
      },
      "CredentialsModel": {
        "type": "object",
        "description": "A model containing the credentials for login purposes.",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets or sets the username.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Gets or sets the password.",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Type into the textbox: Bearer {your JWT token}.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}